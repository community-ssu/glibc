This bug has been submitted upstream BZ368 and fixed in CVS 1.106.
But this revision applied another fix at the same time which cannot
be applied because magic number has to be bumped at the same time.

This patch can be dropped with glibc 2.4.x.

# DP: Dpatch author: Denis Barbier
# DP: Patch author: Denis Barbier
# DP: Upstream status: In CVS
# DP: Status Details: HEAD, but not 2.3 branch yet
# DP: Date: 2006-01-08

Index: glibc-2.3.5/locale/programs/ld-collate.c
===================================================================
--- glibc-2.3.5.orig/locale/programs/ld-collate.c
+++ glibc-2.3.5/locale/programs/ld-collate.c
@@ -2469,14 +2469,15 @@
   runp = collate->start;
   while (runp != NULL)
     {
-      if (runp->mbs != NULL && runp->weights != NULL)
+      if (runp->mbs != NULL && runp->weights != NULL && !runp->is_character)
 	/* Yep, the element really counts.  */
 	++elem_size;
 
       runp = runp->next;
     }
+rehash:
   /* Add 40% and find the next prime number.  */
-  elem_size = MIN (next_prime (elem_size * 1.4), 257);
+  elem_size = next_prime (elem_size * 1.4);
 
   /* Allocate the table.  Each entry consists of two words: the hash
      value and an index in a secondary table which provides the index
@@ -2508,6 +2509,10 @@
 		  idx += iter;
 		  if (idx >= elem_size)
 		    idx -= elem_size;
+		  if (idx == (hash % elem_size)) {
+		    obstack_free (&extrapool, elem_table);
+		    goto rehash;
+		  }
 		}
 	      while (elem_table[idx * 2] != 0);
 	    }
