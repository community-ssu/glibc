#! /bin/sh -e

# All lines beginning with `## DP:' are a description of the patch.
# DP: Description: Updates to dl-trampoline.S making LD_AUDIT usage possible for x86.

PATCHLEVEL=1

if [ $# -lt 1 ]; then
    echo "`basename $0`: script expects -patch|-unpatch as argument" >&2
    exit 1
fi

[ -f debian/patches/00patch-opts ] && . debian/patches/00patch-opts
patch_opts="${patch_opts:--f --no-backup-if-mismatch} ${2:+-d $2}"

case "$1" in
    -patch) patch -p$PATCHLEVEL ${patch_opts} < $0;;
    -unpatch) patch -R -p$PATCHLEVEL ${patch_opts} < $0;;
    *)
        echo "`basename $0`: script expects -patch|-unpatch as argument" >&2
        exit 1;;
esac

exit 0

diff -Naur glibc-2.5.orig/sysdeps/i386/dl-trampoline.S glibc-2.5/sysdeps/i386/dl-trampoline.S
--- glibc-2.5.orig/sysdeps/i386/dl-trampoline.S	2009-02-17 17:26:15.000000000 +0200
+++ glibc-2.5/sysdeps/i386/dl-trampoline.S	2009-02-17 17:26:44.000000000 +0200
@@ -1,5 +1,5 @@
 /* PLT trampolines.  i386 version.
-   Copyright (C) 2004, 2005 Free Software Foundation, Inc.
+   Copyright (C) 2004, 2005, 2007 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -37,10 +37,10 @@
 	call _dl_fixup		# Call resolver.
 	popl %edx		# Get register content back.
 	cfi_adjust_cfa_offset (-4)
-	popl %ecx
-	cfi_adjust_cfa_offset (-4)
-	xchgl %eax, (%esp)	# Get %eax contents end store function address.
-	ret $8			# Jump to function address.
+	movl (%esp), %ecx
+	movl %eax, (%esp)	# Store the function address.
+	movl 4(%esp), %eax
+	ret $12			# Jump to function address.
 	cfi_endproc
 	.size _dl_runtime_resolve, .-_dl_runtime_resolve
 
@@ -83,10 +83,10 @@
 	cfi_adjust_cfa_offset (-4)
 	popl %edx		# Get register content back.
 	cfi_adjust_cfa_offset (-4)
-	popl %ecx
-	cfi_adjust_cfa_offset (-4)
-	xchgl %eax, (%esp)	# Get %eax contents end store function address.
-	ret $16			# Jump to function address.
+	movl (%esp), %ecx
+	movl %eax, (%esp)	# Store the function address.
+	movl 4(%esp), %eax
+	ret $20			# Jump to function address.
 
 	/*
 	    +32     return address
@@ -101,29 +101,31 @@
 	*/
 	cfi_adjust_cfa_offset (12)
 1:	movl %ebx, (%esp)
-	cfi_rel_offset (3, 0)
+	cfi_rel_offset (ebx, 0)
 	movl %edx, %ebx		# This is the frame buffer size
 	pushl %edi
 	cfi_adjust_cfa_offset (4)
-	cfi_rel_offset (7, 0)
+	cfi_rel_offset (edi, 0)
 	pushl %esi
 	cfi_adjust_cfa_offset (4)
-	cfi_rel_offset (6, 0)
+	cfi_rel_offset (esi, 0)
 	leal 44(%esp), %esi
 	movl %ebx, %ecx
+	orl $4, %ebx		# Increase frame size if necessary to align
+				# stack for the function call
+	andl $~3, %ebx
 	movl %esp, %edi
 	subl %ebx, %edi
-	andl $0xfffffff0, %edi	# Align stack
 	movl %esp, %ebx
-	cfi_def_cfa_register (3)
+	cfi_def_cfa_register (ebx)
 	movl %edi, %esp
 	shrl $2, %ecx
 	rep
 	movsl
-	movl (%edi), %esi
-	cfi_restore (6)
-	movl 4(%edi), %edi
-	cfi_restore (7)
+	movl (%ebx), %esi
+	cfi_restore (esi)
+	movl 4(%ebx), %edi
+	cfi_restore (edi)
 	/*
 	   %ebx+40  return address
 	   %ebx+36  PLT1
@@ -144,9 +146,9 @@
 	movl 20(%ebx), %eax
 	call *(%ebx)
 	movl %ebx, %esp
-	cfi_def_cfa_register (4)
+	cfi_def_cfa_register (esp)
 	movl 8(%esp), %ebx
-	cfi_restore (3)
+	cfi_restore (ebx)
 	/*
 	    +40     return address
 	    +36     PLT1
