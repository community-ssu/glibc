#! /bin/sh -e

PATCHLEVEL=3

if [ $# -ne 2 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch -d "$2" -f --no-backup-if-mismatch -p$PATCHLEVEL < $0;;
    -unpatch) patch -d "$2" -f --no-backup-if-mismatch -R -p$PATCHLEVEL < $0;;
    *)
	echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
	exit 1
esac
exit 0

# append the patch here and adjust the -p? flag in the patch calls.

diff -Naur orig/glibc-2.5.1/glibc-2.5/Versions.def new/glibc-2.5.1/glibc-2.5/Versions.def
--- orig/glibc-2.5.1/glibc-2.5/Versions.def	2007-09-25 17:20:31.000000000 +0300
+++ new/glibc-2.5.1/glibc-2.5/Versions.def	2009-07-09 14:03:10.000000000 +0300
@@ -22,6 +22,7 @@
   GLIBC_2.3.4
   GLIBC_2.4
   GLIBC_2.5
+  GLIBC_2.7
 %ifdef USE_IN_LIBIO
   HURD_CTHREADS_0.3
 %endif
diff -Naur orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/Makefile new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/Makefile
--- orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/Makefile	2007-09-25 17:19:47.000000000 +0300
+++ new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/Makefile	2009-07-09 13:52:01.000000000 +0300
@@ -13,7 +13,8 @@
 
 ifeq ($(subdir),misc)
 sysdep_routines += sysctl clone llseek umount umount2 readahead \
-		   setfsuid setfsgid makedev
+		   setfsuid setfsgid makedev signalfd \
+		   eventfd eventfd_read eventfd_write
 
 
 inet-CFLAGS-$(OPTION_EGLIBC_INET) = -DOPTION_EGLIBC_INET
@@ -27,7 +28,7 @@
 		  sys/quota.h sys/fsuid.h \
 		  scsi/sg.h scsi/scsi.h scsi/scsi_ioctl.h sys/pci.h \
 		  sys/ultrasound.h sys/raw.h sys/personality.h sys/epoll.h \
-		  bits/a.out.h sys/inotify.h
+		  bits/a.out.h sys/inotify.h sys/signalfd.h sys/eventfd.h
 
 install-headers-nosubdir: $(inst_includedir)/bits/syscall.h
 
diff -Naur orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/Versions new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/Versions
--- orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/Versions	2007-09-25 17:19:47.000000000 +0300
+++ new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/Versions	2009-07-09 13:51:21.000000000 +0300
@@ -126,6 +126,9 @@
   GLIBC_2.5 {
     splice; sync_file_range; tee; vmsplice;
   }
+  GLIBC_2.7 {
+    eventfd; eventfd_read; eventfd_write; signalfd;
+  }
   GLIBC_PRIVATE {
     # functions used in other libraries
     __syscall_rt_sigqueueinfo;
diff -Naur orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd.c new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd.c
--- orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd.c	1970-01-01 02:00:00.000000000 +0200
+++ new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd.c	2009-07-09 13:48:50.000000000 +0300
@@ -0,0 +1,47 @@
+/* Copyright (C) 2007, 2008 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <errno.h>
+#include <sys/eventfd.h>
+#include <sysdep.h>
+
+
+int
+eventfd (int count, int flags)
+{
+#ifdef __NR_eventfd2
+  return INLINE_SYSCALL (eventfd2, 2, count, flags);
+#else
+  /* The old system call has no flag parameter which is bad.  So we have
+     to wait until we have to support to pass additional values to the
+     kernel (sys_indirect) before implementing setting flags like
+     O_NONBLOCK etc.  */
+  if (flags != 0)
+    {
+      __set_errno (EINVAL);
+      return -1;
+    }
+
+# ifdef __NR_eventfd
+  return INLINE_SYSCALL (eventfd, 1, count);
+# else
+  __set_errno (ENOSYS);
+  return -1;
+# endif
+#endif
+}
diff -Naur orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd_read.c new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd_read.c
--- orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd_read.c	1970-01-01 02:00:00.000000000 +0200
+++ new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd_read.c	2009-07-09 13:48:50.000000000 +0300
@@ -0,0 +1,28 @@
+/* Copyright (C) 2007 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <errno.h>
+#include <unistd.h>
+#include <sys/eventfd.h>
+
+
+int
+eventfd_read (int fd, eventfd_t *value)
+{
+  return __read (fd, value, sizeof (eventfd_t)) != sizeof (eventfd_t) ? -1 : 0;
+}
diff -Naur orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd_write.c new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd_write.c
--- orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd_write.c	1970-01-01 02:00:00.000000000 +0200
+++ new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/eventfd_write.c	2009-07-09 13:48:50.000000000 +0300
@@ -0,0 +1,29 @@
+/* Copyright (C) 2007 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <errno.h>
+#include <unistd.h>
+#include <sys/eventfd.h>
+
+
+int
+eventfd_write (int fd, eventfd_t value)
+{
+  return __write (fd, &value,
+		  sizeof (eventfd_t)) != sizeof (eventfd_t) ? -1 : 0;
+}
diff -Naur orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/signalfd.c new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/signalfd.c
--- orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/signalfd.c	1970-01-01 02:00:00.000000000 +0200
+++ new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/signalfd.c	2009-07-09 13:48:50.000000000 +0300
@@ -0,0 +1,48 @@
+/* Copyright (C) 2007, 2008 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <errno.h>
+#include <signal.h>
+#include <sys/signalfd.h>
+#include <sysdep.h>
+
+
+int
+signalfd (int fd, const sigset_t *mask, int flags)
+{
+#ifdef __NR_signalfd4
+  return INLINE_SYSCALL (signalfd4, 4, fd, mask, _NSIG / 8, flags);
+#else
+  /* The old system call has no flag parameter which is bad.  So we have
+     to wait until we have to support to pass additional values to the
+     kernel (sys_indirect) before implementing setting flags like
+     O_NONBLOCK etc.  */
+  if (flags != 0)
+    {
+      __set_errno (EINVAL);
+      return -1;
+    }
+
+# ifdef __NR_signalfd
+  return INLINE_SYSCALL (signalfd, 3, fd, mask, _NSIG / 8);
+# else
+  __set_errno (ENOSYS);
+  return -1;
+# endif
+#endif
+}
diff -Naur orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/sys/eventfd.h new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/sys/eventfd.h
--- orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/sys/eventfd.h	1970-01-01 02:00:00.000000000 +0200
+++ new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/sys/eventfd.h	2009-07-09 13:48:58.000000000 +0300
@@ -0,0 +1,52 @@
+/* Copyright (C) 2007, 2008 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef	_SYS_EVENTFD_H
+#define	_SYS_EVENTFD_H	1
+
+#include <stdint.h>
+
+
+/* Type for event counter.  */
+typedef uint64_t eventfd_t;
+
+/* Flags for signalfd.  */
+enum
+  {
+    EFD_CLOEXEC = 02000000,
+#define EFD_CLOEXEC EFD_CLOEXEC
+    EFD_NONBLOCK = 04000
+#define EFD_NONBLOCK EFD_NONBLOCK
+  };
+
+
+__BEGIN_DECLS
+
+/* Return file descriptor for generic event channel.  Set initial
+   value to COUNT.  */
+extern int eventfd (int __count, int __flags) __THROW;
+
+/* Read event counter and possibly wait for events.  */
+extern int eventfd_read (int __fd, eventfd_t *__value);
+
+/* Increment event counter.  */
+extern int eventfd_write (int __fd, eventfd_t value);
+
+__END_DECLS
+
+#endif /* sys/eventfd.h */
diff -Naur orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/sys/signalfd.h new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/sys/signalfd.h
--- orig/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/sys/signalfd.h	1970-01-01 02:00:00.000000000 +0200
+++ new/glibc-2.5.1/glibc-2.5/sysdeps/unix/sysv/linux/sys/signalfd.h	2009-07-09 13:48:58.000000000 +0300
@@ -0,0 +1,66 @@
+/* Copyright (C) 2007, 2008 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef	_SYS_SIGNALFD_H
+#define	_SYS_SIGNALFD_H	1
+
+#define __need_sigset_t
+#include <signal.h>
+#include <stdint.h>
+
+
+struct signalfd_siginfo
+{
+  uint32_t ssi_signo;
+  int32_t ssi_errno;
+  int32_t ssi_code;
+  uint32_t ssi_pid;
+  uint32_t ssi_uid;
+  int32_t ssi_fd;
+  uint32_t ssi_tid;
+  uint32_t ssi_band;
+  uint32_t ssi_overrun;
+  uint32_t ssi_trapno;
+  int32_t ssi_status;
+  int32_t ssi_int;
+  uint64_t ssi_ptr;
+  uint64_t ssi_utime;
+  uint64_t ssi_stime;
+  uint64_t ssi_addr;
+  uint8_t __pad[48];
+};
+
+/* Flags for signalfd.  */
+enum
+  {
+    SFD_CLOEXEC = 02000000,
+#define SFD_CLOEXEC SFD_CLOEXEC
+    SFD_NONBLOCK = 04000
+#define SFD_NONBLOCK SFD_NONBLOCK
+  };
+
+__BEGIN_DECLS
+
+/* Request notification for delivery of signals in MASK to be
+   performed using descriptor FD.*/
+extern int signalfd (int __fd, const sigset_t *__mask, int __flags)
+  __THROW __nonnull ((2));
+
+__END_DECLS
+
+#endif /* sys/signalfd.h */
