#! /bin/sh -e

# All lines beginning with `# DP:' are a description of the patch.

if [ $# -ne 2 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch -d "$2" -f --no-backup-if-mismatch -p2 < $0;;
    -unpatch) patch -d "$2" -f --no-backup-if-mismatch -R -p2 < $0;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

@DPATCH@
diff -Nur old/glibc-2.5/ports/sysdeps/arm/backtrace.c new/glibc-2.5/ports/sysdeps/arm/backtrace.c
--- old/glibc-2.5/ports/sysdeps/arm/backtrace.c	1970-01-01 02:00:00.000000000 +0200
+++ new/glibc-2.5/ports/sysdeps/arm/backtrace.c	2009-08-26 11:27:56.000000000 +0300
@@ -0,0 +1,111 @@
+/* Return backtrace of current program state.  Generic version.
+   Copyright (C) 1998, 2000, 2002, 2004, 2005 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1998.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <execinfo.h>
+#include <signal.h>
+#include <sigcontextinfo.h>
+#include <bp-checks.h>
+#include <ldsodefs.h>
+
+/* This implementation assumes a stack layout that matches the defaults
+   used by gcc's `__builtin_frame_address' and `__builtin_return_address'
+   (FP is the frame pointer register):
+
+	  +-----------------+     +-----------------+
+    FP -> | previous FP --------> | previous FP ------>...
+	  |                 |     |                 |
+	  | return address  |     | return address  |
+	  +-----------------+     +-----------------+
+
+  */
+
+/* Get some notion of the current stack.  Need not be exactly the top
+   of the stack, just something somewhere in the current frame.  */
+#ifndef CURRENT_STACK_FRAME
+# define CURRENT_STACK_FRAME  ({ char __csf; &__csf; })
+#endif
+
+/* By default, the frame pointer is just what we get from gcc.  */
+#ifndef FIRST_FRAME_POINTER
+# define FIRST_FRAME_POINTER  __builtin_frame_address (0)
+#endif
+
+#ifndef NO_VALIDATE_ADDR
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <unistd.h>
+static int
+validate_addr(void *ptr, int fd)
+{
+	char dummy;
+	if (fd == -1 ||
+	    lseek(fd, (off_t)ptr, SEEK_SET) == (off_t)-1 ||
+	    read(fd, &dummy, 1) != 1) {
+		return 0;
+	}
+	return 1;
+}
+static int
+validate_init()
+{
+	return open("/proc/self/mem", O_RDONLY);
+}
+#else
+static int validate_addr(void *ptr, int fd) { return 1; }
+static int validate_init() { return -1; }
+#endif
+
+int
+__backtrace (array, size)
+	void **array;
+	int size;
+{
+	int cnt = 0, fd = 0;
+	void **frame;
+	void *top_stack;
+	unsigned *instr;
+	top_stack = CURRENT_STACK_FRAME;
+	frame = FIRST_FRAME_POINTER;
+	fd = validate_init();
+	while (cnt < size) {
+		frame = frame-3;
+		if ((void *)frame < top_stack || (void *)frame >= __libc_stack_end
+				|| ((unsigned long)frame & 3)) {
+			break;
+		}
+		instr = (unsigned *)frame[3]-2;
+		if (validate_addr(instr, fd) == 1 &&
+			(*instr & 0xFFFFD800) == 0xE92DD800) {
+		    
+			/* Standard APCS frame. */
+			array[cnt++] = frame[2];
+			frame = (void **)frame[0];
+		} else {
+			/* Codesourcery optimized normal frame. */
+			array[cnt++] = frame[3];
+			frame = (void **)frame[2];
+		}
+	}
+	if (fd != -1) close(fd);
+	return cnt;
+}
+weak_alias (__backtrace, backtrace)
+libc_hidden_def (__backtrace)
