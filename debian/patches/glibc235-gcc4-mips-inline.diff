#! /bin/sh -e

# All lines beginning with `# DP:' are a description of the patch.
# DP: Description: Make glibc-2.3.5 compile with gcc-4.0 on mips for inline
#		   functions of dl-machine.h.
# DP: Related bugs: 
# DP: Dpatch author: GOTO Masanori <gotom@debian.org>
# DP: Patch author: GOTO Masanori <gotom@debian.org>
# DP: Upstream status: In CVS / Debian-Specific
# DP: Status Details: 
# DP: Date: 2005-07-17

PATCHLEVEL=0

if [ $# -ne 2 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch -d "$2" -f --no-backup-if-mismatch -p$PATCHLEVEL < $0;;
    -unpatch) patch -d "$2" -f --no-backup-if-mismatch -R -p$PATCHLEVEL < $0;;
    *)
	echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
	exit 1
esac
exit 0

# append the patch here and adjust the -p? flag in the patch calls.
2005-07-17  GOTO Masanori  <gotom@debian.org>

	* sysdeps/mips/dl-machine.h: Use auto inline.

--- sysdeps/mips/dl-machine.h	2005-07-17 00:36:51.000000000 +0900
+++ sysdeps/mips/dl-machine.h.new	2005-07-17 00:40:18.000000000 +0900
@@ -528,7 +528,11 @@
 /* Perform the relocation specified by RELOC and SYM (which is fully resolved).
    MAP is the object containing the reloc.  */
 
-static inline void
+#if __GNUC__ >= 4 
+  auto inline void 
+#else 
+  static inline void 
+#endif 
 #ifdef RTLD_BOOTSTRAP
   __attribute__ ((always_inline))
 #endif
@@ -635,14 +639,28 @@
     }
 }
 
-static inline void
+#if __GNUC__ >= 4 
+  auto inline void 
+#else 
+  static inline void 
+#endif 
+#if __GNUC__ >= 4 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 2) 
+  __attribute ((always_inline)) 
+#endif 
 elf_machine_rel_relative (ElfW(Addr) l_addr, const ElfW(Rel) *reloc,
 			  void *const reloc_addr)
 {
   /* XXX Nothing to do.  There is no relative relocation, right?  */
 }
 
-static inline void
+#if __GNUC__ >= 4 
+  auto inline void 
+#else 
+  static inline void 
+#endif 
+#if __GNUC__ >= 4 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 2) 
+  __attribute ((always_inline)) 
+#endif 
 elf_machine_lazy_rel (struct link_map *map,
 		      ElfW(Addr) l_addr, const ElfW(Rel) *reloc)
 {
@@ -651,7 +669,14 @@
 
 #ifndef RTLD_BOOTSTRAP
 /* Relocate GOT. */
-static inline void
+#if __GNUC__ >= 4 
+  auto inline void 
+#else 
+  static inline void 
+#endif 
+#if __GNUC__ >= 4 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 2) 
+  __attribute ((always_inline)) 
+#endif 
 elf_machine_got_rel (struct link_map *map, int lazy)
 {
   ElfW(Addr) *got;
@@ -738,7 +763,14 @@
 /* Set up the loaded object described by L so its stub function
    will jump to the on-demand fixup code __dl_runtime_resolve.  */
 
-static inline int
+#if __GNUC__ >= 4 
+  auto inline int
+#else 
+  static inline int
+#endif 
+#if __GNUC__ >= 4 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 2) 
+  __attribute ((always_inline)) 
+#endif 
 elf_machine_runtime_setup (struct link_map *l, int lazy, int profile)
 {
 # ifndef RTLD_BOOTSTRAP
